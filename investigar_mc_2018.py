#!/usr/bin/env python3
"""
Investigaci√≥n detallada: ¬øD√≥nde est√° Movimiento Ciudadano en 2018?
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from kernel.procesar_senado import (
    procesar_senado, 
    detectar_anio_desde_siglado, 
    obtener_coaliciones_por_anio,
    obtener_partidos_por_anio,
    leer_siglado_senado
)
import pandas as pd

def investigar_mc_2018():
    """Investiga d√≥nde est√° MC en los datos de 2018"""
    print("=" * 80)
    print("üîç INVESTIGACI√ìN: ¬øD√ìNDE EST√Å MOVIMIENTO CIUDADANO EN 2018?")
    print("=" * 80)
    
    # 1. Verificar archivos disponibles de 2018
    archivos_2018 = [
        "data/computos_senado_2018.parquet", 
        "data/ine_cg2018_senado_siglado_long.csv",
        "data/ine_cg2018_senado_siglado_long_corregido.csv"
    ]
    
    print("üìÅ ARCHIVOS DE 2018 DISPONIBLES:")
    for archivo in archivos_2018:
        existe = "‚úÖ" if os.path.exists(archivo) else "‚ùå"
        print(f"  {existe} {archivo}")
    print()
    
    # 2. Analizar coaliciones 2018
    print("ü§ù COALICIONES ESPERADAS PARA 2018:")
    coaliciones_2018 = obtener_coaliciones_por_anio(2018)
    for coal, partidos in coaliciones_2018.items():
        print(f"  ‚Ä¢ {coal}: {partidos}")
        if 'MC' in partidos:
            print("    üëÜ MC deber√≠a estar en esta coalici√≥n")
    print()
    
    partidos_2018 = obtener_partidos_por_anio(2018)
    print(f"üé™ PARTIDOS V√ÅLIDOS 2018: {partidos_2018}")
    mc_valido = "‚úÖ MC est√° incluido" if 'MC' in partidos_2018 else "‚ùå MC NO est√° incluido"
    print(f"  {mc_valido}")
    print()
    
    # 3. Analizar siglado 2018
    print("üìã AN√ÅLISIS DEL SIGLADO 2018:")
    siglado_files = [
        "data/ine_cg2018_senado_siglado_long.csv",
        "data/ine_cg2018_senado_siglado_long_corregido.csv"
    ]
    
    for siglado_file in siglado_files:
        if os.path.exists(siglado_file):
            print(f"\nüìÑ Analizando: {siglado_file}")
            
            # Leer crudo
            df_raw = pd.read_csv(siglado_file)
            print(f"  Filas: {len(df_raw)}")
            print(f"  Columnas: {list(df_raw.columns)}")
            
            # Buscar MC expl√≠citamente
            if 'GRUPO_PARLAMENTARIO' in df_raw.columns:
                mc_rows = df_raw[df_raw['GRUPO_PARLAMENTARIO'].str.contains('MC|MOVIMIENTO CIUDADANO', case=False, na=False)]
                print(f"  üîç Filas con MC/MOVIMIENTO CIUDADANO: {len(mc_rows)}")
                if len(mc_rows) > 0:
                    print("    Muestra:")
                    print(mc_rows[['ENTIDAD_ASCII', 'COALICION', 'GRUPO_PARLAMENTARIO']].head().to_string(index=False))
            
            if 'COALICION' in df_raw.columns:
                coaliciones_encontradas = df_raw['COALICION'].value_counts()
                print(f"  ü§ù Coaliciones encontradas:")
                for coal, count in coaliciones_encontradas.items():
                    print(f"    ‚Ä¢ {coal}: {count} filas")
                    if 'MEXICO' in coal and 'FRENTE' in coal:
                        print("      üëÜ Esta deber√≠a incluir MC")
            print()
    
    # 4. Analizar votos 2018
    print("üó≥Ô∏è AN√ÅLISIS DE VOTOS 2018:")
    votos_file = "data/computos_senado_2018.parquet"
    if os.path.exists(votos_file):
        df_votos = pd.read_parquet(votos_file)
        print(f"  Archivo de votos le√≠do: {len(df_votos)} filas")
        print(f"  Columnas: {list(df_votos.columns)}")
        
        # Buscar columnas con MC
        mc_cols = [col for col in df_votos.columns if 'MC' in col.upper()]
        print(f"  üîç Columnas con 'MC': {mc_cols}")
        
        # Buscar columnas con MOVIMIENTO o CIUDADANO
        mov_cols = [col for col in df_votos.columns if 'MOVIMIENTO' in col.upper() or 'CIUDADANO' in col.upper()]
        print(f"  üîç Columnas con 'MOVIMIENTO/CIUDADANO': {mov_cols}")
        
        # Mostrar muestra de columnas
        print(f"  üìä Muestra de columnas (primeras 20):")
        for i, col in enumerate(df_votos.columns[:20]):
            print(f"    {i+1:2d}. {col}")
        
        if len(df_votos.columns) > 20:
            print(f"    ... y {len(df_votos.columns) - 20} columnas m√°s")
    else:
        print("  ‚ùå Archivo de votos no encontrado")
    print()

def test_senado_2018():
    """Prueba el sistema con datos de 2018 para ver qu√© pasa con MC"""
    print("=" * 80)
    print("üß™ TEST SENADO 2018 - VERIFICAR MC")
    print("=" * 80)
    
    votos_csv = "data/computos_senado_2018.parquet"
    siglado_csv = "data/ine_cg2018_senado_siglado_long_corregido.csv"  # Usar el corregido
    
    # Verificar archivos
    if not os.path.exists(votos_csv):
        print(f"‚ùå No se encuentra: {votos_csv}")
        return
    if not os.path.exists(siglado_csv):
        print(f"‚ùå No se encuentra: {siglado_csv}")
        return
    
    print("‚úÖ Archivos encontrados, procediendo con el test...")
    
    # Primero, analizar el siglado corregido en detalle
    print("\nüîç AN√ÅLISIS DETALLADO DEL SIGLADO CORREGIDO:")
    df_siglado = pd.read_csv(siglado_csv)
    print(f"Total filas: {len(df_siglado)}")
    
    # Verificar coalici√≥n "POR MEXICO AL FRENTE" que deber√≠a tener MC
    pmf_rows = df_siglado[df_siglado['COALICION'].str.contains('FRENTE', case=False, na=False)]
    print(f"\nFilas de 'POR MEXICO AL FRENTE': {len(pmf_rows)}")
    if len(pmf_rows) > 0:
        print("Grupos parlamentarios en esta coalici√≥n:")
        gp_counts = pmf_rows['GRUPO_PARLAMENTARIO'].value_counts()
        print(gp_counts)
        
        print("\nMuestra de filas 'POR MEXICO AL FRENTE':")
        print(pmf_rows[['ENTIDAD_ASCII', 'COALICION', 'FORMULA', 'GRUPO_PARLAMENTARIO']].head(10).to_string(index=False))
    
    # Verificar si hay alguna menci√≥n de MC en todo el archivo
    all_text = ' '.join(df_siglado.astype(str).values.flatten())
    mc_mentions = ['MC', 'MOVIMIENTO CIUDADANO', 'CIUDADANO']
    print(f"\nüîç B√∫squeda de menciones de MC en el siglado:")
    for term in mc_mentions:
        count = all_text.upper().count(term)
        print(f"  '{term}': {count} menciones")
    
    try:
        # Test Sistema Vigente 2018
        resultado = procesar_senado(
            votos_csv=votos_csv,
            siglado_csv=siglado_csv,
            mr_escanos=96,
            rp_escanos=32,
            rp_tipo='nacional'
        )
        
        print(f"\nüéØ Total esca√±os: {resultado['total_escanos']}")
        print(f"üóìÔ∏è A√±o detectado: {resultado['anio']}")
        print()
        
        print("üìä RESULTADOS POR PARTIDO:")
        print(f"{'Partido':<10} {'Esca√±os':<8} {'% Esca√±os':<10} {'Votos':<12} {'% Votos':<8}")
        print("-" * 60)
        
        mc_encontrado = False
        for fila in resultado['tabla']:
            partido = fila['partido']
            escanos = fila['escanos']
            pct_escanos = fila['porcentaje_escanos']
            votos = fila['votos']
            pct_votos = fila['porcentaje_votos']
            
            if partido == 'MC':
                mc_encontrado = True
                print(f"üëâ {partido:<10} {escanos:<8} {pct_escanos:<9.1f}% {votos:<12,.0f} {pct_votos:<7.1f}% üëà ¬°AQU√ç EST√Å MC!")
            else:
                print(f"{partido:<10} {escanos:<8} {pct_escanos:<9.1f}% {votos:<12,.0f} {pct_votos:<7.1f}%")
        
        if not mc_encontrado:
            print("‚ùå MC NO APARECI√ì EN LOS RESULTADOS")
            
            # Verificar votos de MC espec√≠ficamente
            df_votos = pd.read_parquet(votos_csv)
            if 'MC' in df_votos.columns:
                mc_votos_total = df_votos['MC'].sum()
                print(f"üìä MC tiene {mc_votos_total:,} votos totales")
                
                # Ver distribuci√≥n por estado
                print("\nüó∫Ô∏è Distribuci√≥n de votos MC por estado (top 10):")
                mc_por_estado = df_votos[['ENTIDAD', 'MC']].sort_values('MC', ascending=False)
                print(mc_por_estado.head(10).to_string(index=False))
                
            # Verificar si MC est√° en la lista de partidos v√°lidos para 2018
            partidos_2018 = obtener_partidos_por_anio(2018)
            if 'MC' in partidos_2018:
                print("\n‚úÖ MC S√ç est√° en la lista de partidos v√°lidos 2018")
                print("üîç Posibles causas:")
                print("  1. MC no tiene suficientes votos para pasar umbral")
                print("  2. MC no est√° representado en el siglado 2018")
                print("  3. MC est√° en coalici√≥n 'POR MEXICO AL FRENTE' pero mal mapeado")
                print("  4. Error en la l√≥gica de b√∫squeda de grupo parlamentario")
            else:
                print("‚ùå MC NO est√° en la lista de partidos v√°lidos 2018")
        
    except Exception as e:
        print(f"‚ùå Error procesando senado 2018: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    investigar_mc_2018()
    print("\n")
    test_senado_2018()
