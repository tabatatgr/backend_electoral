#!/usr/bin/env python3
"""
DIAGN√ìSTICO: ¬øPor qu√© la distribuci√≥n proporcional no encuentra votos de coaliciones?
"""

import pandas as pd
import os

def diagnosticar_distribucion_coaliciones():
    """Diagnosticar por qu√© no se encuentran votos de coaliciones"""
    
    print("=" * 80)
    print("üîç DIAGN√ìSTICO: DISTRIBUCI√ìN PROPORCIONAL DE COALICIONES")
    print("=" * 80)
    
    # 1. ANALIZAR ESTRUCTURA DE C√ìMPUTOS 2018
    print("\nüìä 1. ESTRUCTURA DE C√ìMPUTOS 2018")
    print("-" * 50)
    
    archivo_computos = 'data/computos_diputados_2018.parquet'
    df = pd.read_parquet(archivo_computos)
    
    print(f"Columnas en c√≥mputos: {list(df.columns)}")
    print(f"Shape: {df.shape}")
    
    # 2. ANALIZAR SIGLADO 2018
    print("\nüìÑ 2. COALICIONES EN SIGLADO 2018")
    print("-" * 50)
    
    archivo_siglado = 'data/siglado-diputados-2018.csv'
    df_siglado = pd.read_csv(archivo_siglado)
    
    coaliciones_siglado = df_siglado['coalicion'].unique()
    print(f"Coaliciones en siglado: {coaliciones_siglado}")
    
    # 3. BUSCAR CORRESPONDENCIA
    print("\nüîç 3. B√öSQUEDA DE CORRESPONDENCIA")
    print("-" * 50)
    
    # Coaliciones esperadas vs columnas disponibles
    coaliciones_esperadas = [
        'JUNTOS HAREMOS HISTORIA',
        'POR MEXICO AL FRENTE', 
        'TODOS POR MEXICO'
    ]
    
    print("B√öSQUEDA EXHAUSTIVA DE VOTOS DE COALICIONES:")
    
    for coalicion in coaliciones_esperadas:
        print(f"\nü§ù Coalici√≥n: {coalicion}")
        
        # Variaciones de nombres a buscar
        variaciones = [
            coalicion,
            coalicion.replace(' ', '_'),
            coalicion.replace(' ', ''),
            coalicion.upper(),
            coalicion.lower(),
            coalicion.replace('√Å', 'A').replace('√â', 'E').replace('√ç', 'I').replace('√ì', 'O').replace('√ö', 'U'),
            # Variaciones espec√≠ficas
            'JUNTOS_HAREMOS_HISTORIA' if 'JUNTOS' in coalicion else None,
            'POR_MEXICO_AL_FRENTE' if 'FRENTE' in coalicion else None,
            'TODOS_POR_MEXICO' if 'TODOS' in coalicion else None
        ]
        
        # Limpiar nones
        variaciones = [v for v in variaciones if v is not None]
        
        encontrado = False
        for variacion in variaciones:
            if variacion in df.columns:
                votos = df[variacion].sum()
                print(f"   ‚úÖ Encontrado '{variacion}': {votos:,} votos")
                encontrado = True
                break
        
        if not encontrado:
            print(f"   ‚ùå No encontrado en ninguna variaci√≥n")
            print(f"   üîç Variaciones buscadas: {variaciones[:5]}")
    
    # 4. REVISAR SI LOS VOTOS YA EST√ÅN DISTRIBUIDOS
    print("\n\nüí° 4. AN√ÅLISIS DE VOTOS YA DISTRIBUIDOS")
    print("-" * 50)
    
    # Analizar votos por partido vs coalici√≥n
    partidos_frente = ['PAN', 'PRD', 'MC']
    votos_individuales = sum(df[p].sum() for p in partidos_frente if p in df.columns)
    
    print(f"Votos individuales POR MEXICO AL FRENTE:")
    for partido in partidos_frente:
        if partido in df.columns:
            votos = df[partido].sum()
            print(f"   {partido}: {votos:,}")
    print(f"   TOTAL: {votos_individuales:,}")
    
    # Calcular qu√© proporci√≥n deber√≠a tener MC
    registros_frente = df_siglado[df_siglado['coalicion'] == 'POR MEXICO AL FRENTE']
    if len(registros_frente) > 0:
        mc_registros = len(registros_frente[registros_frente['grupo_parlamentario'] == 'MC'])
        total_registros = len(registros_frente)
        proporcion_mc = mc_registros / total_registros
        
        print(f"\nPROPORCI√ìN MC EN COALICI√ìN:")
        print(f"   MC registros: {mc_registros}")
        print(f"   Total registros: {total_registros}")
        print(f"   Proporci√≥n MC: {proporcion_mc:.1%}")
        print(f"   Votos que deber√≠a tener MC: {votos_individuales * proporcion_mc:,.0f}")

def proponer_solucion():
    """Proponer soluci√≥n para la distribuci√≥n"""
    
    print("\n\nüîß 5. SOLUCI√ìN PROPUESTA")
    print("-" * 40)
    
    print("""
PROBLEMA IDENTIFICADO:
Los archivos de c√≥mputos NO tienen columnas de coaliciones.
Los votos ya est√°n distribuidos por partido individual.

NUEVA ESTRATEGIA:
1. Los votos individuales ya est√°n correctos por distrito
2. El problema de MC es que tiene pocos votos DIRECTOS (100K)
3. Pero MC gana distritos como parte de coalici√≥n
4. Soluci√≥n: Para RP, usar distribuci√≥n PROPORCIONAL de votos de coalici√≥n

IMPLEMENTACI√ìN:
- Detectar que MC est√° en coalici√≥n "POR MEXICO AL FRENTE"
- Sumar votos de PAN + PRD + MC = votos totales de coalici√≥n
- Redistribuir proporcionalmente seg√∫n registros en siglado
- Resultado: MC tendr√° suficientes votos para RP

C√ÅLCULO ESPERADO:
- Votos coalici√≥n: PAN(10M) + PRD(3M) + MC(0.1M) = 13.1M
- Proporci√≥n MC: 53/269 = 19.7%
- Votos MC distribuidos: 13.1M √ó 19.7% = 2.6M
- Con 2.6M votos, MC superar√° 3% ‚Üí Calificar√° para RP
""")

if __name__ == "__main__":
    diagnosticar_distribucion_coaliciones()
    proponer_solucion()
